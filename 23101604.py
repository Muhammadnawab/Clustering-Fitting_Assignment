# -*- coding: utf-8 -*-
"""Updated_Assignment_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18ygNJn6XYxgULxkrO9kQAdb4KpvnIUQL

Iris Dataset Code
"""

from google.colab import drive
drive.mount('/content/drive')

"""Wine dataset code"""

# Importing required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

# Load a different dataset (Wine dataset in this case)
from sklearn.datasets import load_wine
wine_data = load_wine()

# Add metadata (Name, Student Number, GitHub Link)
metadata = {
    "Name": "Muhammad Nawab",
    "Student Number": "23101604",
    "GitHub Repository": "https://github.com/nawab/ClusteringAndFittingReport"
}
print(metadata)

# Create a DataFrame with the wine dataset
df = pd.DataFrame(wine_data.data, columns=wine_data.feature_names)
df['target'] = wine_data.target

# Function 1: Plot Histogram with a different color
def plot_histogram(data, column):
    plt.figure(figsize=(8, 6))
    plt.hist(data[column], bins=20, color='lightcoral', edgecolor='black')  # Changed color
    plt.title(f'Histogram of {column}', fontsize=16)
    plt.xlabel(column, fontsize=14)
    plt.ylabel('Frequency', fontsize=14)
    plt.grid(True)
    plt.tight_layout()
    plt.show()  # Display the plot

# Function 2: Plot Scatter Plot with a different colormap
def plot_scatter(data, x_col, y_col, target_col):
    plt.figure(figsize=(8, 6))
    plt.scatter(data[x_col], data[y_col], c=data[target_col], cmap='plasma')  # Changed colormap
    plt.title(f'Scatter Plot: {x_col} vs {y_col}', fontsize=16)
    plt.xlabel(x_col, fontsize=14)
    plt.ylabel(y_col, fontsize=14)
    plt.colorbar(label='Target (Class)')
    plt.grid(True)
    plt.tight_layout()
    plt.show()  # Display the plot

# Function 3: Plot Heatmap with a different colormap
def plot_heatmap(data):
    plt.figure(figsize=(10, 8))
    sns.heatmap(data.corr(), annot=True, cmap='coolwarm', fmt=".2f")  # Changed colormap
    plt.title('Correlation Heatmap', fontsize=16)
    plt.tight_layout()
    plt.show()  # Display the plot

# Function 4: Plot Elbow Plot for K-Means with a different color line
def plot_elbow(data, max_k):
    inertia = []
    K_range = range(1, max_k + 1)
    for k in K_range:
        km = KMeans(n_clusters=k, random_state=42)
        km.fit(data)
        inertia.append(km.inertia_)
    plt.figure(figsize=(8, 6))
    plt.plot(K_range, inertia, marker='o', linestyle='--', color='#ff5733')  # Changed color
    plt.title('Elbow Plot for Optimal K', fontsize=16)
    plt.xlabel('Number of Clusters (K)', fontsize=14)
    plt.ylabel('Inertia', fontsize=14)
    plt.grid(True)
    plt.tight_layout()
    plt.show()  # Display the plot

# Generate the plots
plot_histogram(df, 'alcohol')
plot_scatter(df, 'alcohol', 'malic_acid', 'target')
plot_heatmap(df)
plot_elbow(df.iloc[:, :-1], max_k=10)

# Regression Analysis: Predict Malic Acid from Alcohol
X = df[['alcohol']]
y = df['malic_acid']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
regressor = LinearRegression()
regressor.fit(X_train, y_train)
y_pred = regressor.predict(X_test)

# Print regression results
print("Regression Coefficient:", regressor.coef_)
print("Regression Intercept:", regressor.intercept_)

# Confusion Matrix for K-Means Clustering with a different color scheme
true_classes = df['target']
predicted_classes = KMeans(n_clusters=3, random_state=42).fit_predict(df.iloc[:, :-1])
cm = confusion_matrix(true_classes, predicted_classes)
cmd = ConfusionMatrixDisplay(cm, display_labels=wine_data.target_names)
cmd.plot(cmap='YlGnBu', xticks_rotation='vertical')  # Changed colormap
plt.title('Confusion Matrix')
plt.tight_layout()
plt.show()  # Display the plot

"""Load by manual use this code"""